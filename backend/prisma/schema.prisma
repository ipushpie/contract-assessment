generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String
  password    String
  role        Role         @default(USER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assessments Assessment[]
  contracts   Contract[]
}

model Contract {
  id                 String       @id @default(uuid())
  name               String
  vendorName         String
  contractNumber     String?
  startDate          DateTime
  endDate            DateTime
  annualValue        Float
  totalValue         Float
  duration           Int
  terminationNotice  Int?
  autoRenewal        Boolean      @default(false)
  customerDefinition String?
  geographicLimits   String?
  auditObligations   String?
  documentUrl        String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  createdById        String
  assessments        Assessment[]
  createdBy          User         @relation(fields: [createdById], references: [id])
  products           Product[]
}

model Product {
  id         String     @id @default(uuid())
  name       String
  quantity   Int
  unitPrice  Float
  discount   Float?
  totalPrice Float
  contractId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  contract   Contract   @relation(fields: [contractId], references: [id], onDelete: Cascade)
  usageData  UsageData?
}

model UsageData {
  id                 String   @id @default(uuid())
  activeUserPercent  Float?
  featureUtilization Float?
  usageFrequency     String?
  productId          String   @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Assessment {
  id                      String           @id @default(uuid())
  contractId              String
  assessorId              String
  volumeChangeForecasts   String?
  additionalProducts      String?
  redundantProducts       String?
  downgradePotential      String?
  preferredContractLength Int?
  paymentFlexibility      Boolean          @default(false)
  vendorSwitchWillingness Boolean          @default(false)
  satisfactionRating      Int?
  impactRating            Int?
  isNicheVendor           Boolean          @default(false)
  recommendations         String?
  status                  AssessmentStatus @default(IN_PROGRESS)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  assessor                User             @relation(fields: [assessorId], references: [id])
  contract                Contract         @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  REVIEWER
  VIEWER
  USER
}

enum AssessmentStatus {
  IN_PROGRESS
  COMPLETED
  REVIEWED
}
